{"version":3,"sources":["components/Navbar.js","components/RosterData.js","components/TeamData.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","AppBar","position","style","backgroundColor","Toolbar","textDecoration","color","href","Typography","variant","useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","palette","background","paper","marginTop","gridList","width","height","margin","padding","Roster","team","useParams","useState","setErrors","roster","setRoster","a","fetch","headers","json","then","res","catch","err","useEffect","fetchData","classes","className","GridList","cellHeight","cols","length","map","player","index","GridListTile","key","Paper","fontSize","fontWeight","Jersey","FirstName","LastName","Position","src","PhotoUrl","borderRadius","verticalAlign","Height","toFixed","split","birthday","ageDifMs","Date","now","getTime","ageDate","Math","abs","getUTCFullYear","_calculateAge","BirthDate","Experience","fontFamily","overflowX","table","minWidth","Teams","teams","setTeams","allTeams","TeamTest","handleClick","e","window","location","assign","currentTarget","id","Table","aria-label","TableHead","TableRow","TableCell","TableBody","onClick","bind","Key","hover","component","scope","textAlign","find","data","TeamID","WikipediaLogoUrl","City","Name","Conference","Division","Wins","Losses","PointsPerGameFor","PointsPerGameAgainst","StreakDescription","colSpan","App","exact","path","TeamData","RosterData","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1c3ccc90.chunk.js","sourcesContent":["import React from 'react'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Link, colors } from '@material-ui/core'\r\nconst NavBar = () => {\r\n    return(\r\n        <div>\r\n        <AppBar position=\"static\" style={{backgroundColor: \"#17408B\"}}>\r\n            <Toolbar>\r\n                <a style={{textDecoration: 'none', color: 'white'}} href=\"/\">\r\n                <Typography variant=\"title\" color=\"inherit\">\r\n                    NBA\r\n                </Typography>\r\n                </a>\r\n            </Toolbar>\r\n        </AppBar>\r\n        </div>\r\n    )\r\n}\r\nexport default NavBar;","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\n//import RosterTest from '../test data/roster.json'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useParams\r\n  } from \"react-router-dom\";\r\nimport { Typography } from \"@material-ui/core\";\r\n//import axios from 'axios';\r\n\r\n// const useStyles = makeStyles({\r\n//     root: {\r\n//       width: '100%',\r\n//       overflowX: 'auto',\r\n//     },\r\n//     table: {\r\n//       minWidth: 650,\r\n//     },\r\n//   });\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n    backgroundColor: theme.palette.background.paper,\r\n    marginTop: 25\r\n  },\r\n  gridList: {\r\n    width: '80%',\r\n    height: '100%',\r\n  },\r\n  paper: {\r\n    margin: '0 10px 0 10px',\r\n    padding: 15\r\n  }\r\n}));\r\n\r\nfunction _calculateAge(birthday) {\r\n  var ageDifMs = Date.now() - birthday.getTime();\r\n  var ageDate = new Date(ageDifMs);\r\n  return Math.abs(ageDate.getUTCFullYear() - 1970);\r\n}\r\n\r\nconst Roster = () => {\r\n\r\n  let { team } = useParams();\r\n    \r\n    const [hasError, setErrors] = useState(false);\r\n    const [roster, setRoster] = useState({});\r\n  \r\n    async function fetchData(team) {\r\n        const res = await fetch(\"https://cors-anywhere.herokuapp.com/https://api.sportsdata.io/v3/nba/stats/json/Players/\" + team,\r\n        {headers: {\r\n          'Ocp-Apim-Subscription-Key': 'af3a771073da4ff2960f22591f39accc'\r\n        }});\r\n        res\r\n        .json()\r\n         .then(res => setRoster(res))\r\n         .catch(err => setErrors(err));\r\n    }\r\n\r\n    // async function fetchPlayerData() {\r\n    //   const res1 = await fetch(\"https://www.thesportsdb.com/api/v1/json/1/searchplayers.php?t=\"+ roster.team.name + \"&p=\" + roster.player.first_name + \"%20\" + roster.player.last_name);\r\n    //      res1.json()\r\n    //       .then(res1 => setPlayer(res1.data))\r\n    //       .catch(err => setErrors(err));\r\n    // }\r\n\r\n    useEffect(() => {\r\n        fetchData(team);\r\n        //fetchPlayerData();\r\n    }, []);\r\n\r\n    const classes = useStyles();\r\n    //const roster = RosterTest;\r\n\r\n    return (\r\n    <div className={classes.root}>\r\n      <GridList cellHeight={160} className={classes.gridList} cols={3}>\r\n       {(roster.length > 0) ? roster.map((player, index) => {\r\n          return (\r\n            <GridListTile key={index} cols={1}>\r\n              <Paper className={classes.paper}>\r\n              <div>\r\n                <Typography variant=\"h5\">\r\n                  <span style={{fontSize: 26, fontWeight: '700'}}>{player.Jersey}</span>&nbsp;\r\n                  {player.FirstName + \" \" + player.LastName}&nbsp;\r\n                  <span style={{fontSize: 16, fontWeight: '200'}}>{player.Position}</span>\r\n                </Typography>\r\n              </div>\r\n              <div>\r\n                <img src={player.PhotoUrl} style={{display: 'inline-block', borderRadius: '100%'}}></img>\r\n                <div style={{display: 'inline-block', verticalAlign: 'top'}}>\r\n                  <Typography variant=\"body1\"><small>Height: </small>{(player.Height/12).toFixed(1).split('.')[0] + \"'\" + (player.Height/12).toFixed(1).split('.')[1] + '\"'}</Typography>\r\n                  <Typography variant=\"body1\"><small>Age: </small>{_calculateAge(new Date(player.BirthDate))}</Typography>\r\n                  <Typography variant=\"body1\"><small>Experience: </small>{player.Experience > 1 ? player.Experience + \" years\" : player.Experience == 0 ? \"None\" : player.Experience  + \" year\"}</Typography>\r\n                </div>                  \r\n              </div>\r\n                 \r\n              </Paper>\r\n            </GridListTile>\r\n            )\r\n        }) : \r\n        <p>Loading...</p>}\r\n      </GridList>\r\n    </div>\r\n    )\r\n};\r\nexport default Roster;","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TeamTest from '../test data/teams.json'\r\n//import StandingTest from '../test data/standings.json'\r\nimport RosterData from './RosterData';\r\nimport { BrowserRouter, Route, Link } from \"react-router-dom\";\r\nimport { fontFamily } from \"@material-ui/system\";\r\nimport { template } from \"@babel/core\";\r\n//import axios from 'axios';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n      fontFamily: 'Inter',\r\n      width: '100%',\r\n      overflowX: 'auto',\r\n    },\r\n    table: {\r\n      margin: \"0 auto\",\r\n      minWidth: 200,\r\n      width: '100%',\r\n      overflow: 'scroll'\r\n    },\r\n  });\r\n\r\nconst Teams = () => {\r\n    const [hasError, setErrors] = useState(false);\r\n    const [teams, setTeams] = useState({});\r\n  \r\n    //https://api.sportsdata.io/v3/nba/scores/json/teams\r\n    async function fetchData() {\r\n          const res = await fetch(\"https://cors-anywhere.herokuapp.com/https://api.sportsdata.io/v3/nba/scores/json/Standings/2020\",\r\n          {headers: {\r\n            'Ocp-Apim-Subscription-Key': 'af3a771073da4ff2960f22591f39accc'\r\n          }});\r\n          res\r\n          .json()\r\n           .then(res => setTeams(res))\r\n           .catch(err => setErrors(err));\r\n      }\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n\r\n    //<div style={{backgroundColor: \"#dae2f0\" , textAlign: 'center', borderRadius: '50%', width: '100px', height: '100px', position: 'relative'}}>\r\n    //<img src={team.WikipediaLogoUrl} width=\"70px\" height=\"70px\" style={{position: 'absolute', maxHeight: '100%' , margin: 'auto', top: 0, left: 0, right: 0, bottom: 0}}/>\r\n    //</div>         \r\n\r\n    const classes = useStyles();\r\n\r\n    //const teams = StandingTest;\r\n    const allTeams = TeamTest;\r\n    function handleClick(e) {\r\n      window.location.assign(\"/\" + e.currentTarget.id);\r\n    }\r\n\r\n    return (     \r\n    <Paper className={classes.root}>\r\n      <Table className={classes.table} aria-label=\"nba team table\">\r\n        <colgroup>\r\n          <col width=\"10%\" />\r\n          <col width=\"50%\" />\r\n          <col width=\"10%\" />\r\n          <col width=\"10%\" />\r\n          <col width=\"10%\"/>\r\n        </colgroup>\r\n        <TableHead>\r\n          <TableRow>\r\n          <TableCell></TableCell>\r\n            <TableCell><b>Team</b></TableCell>\r\n            <TableCell><b>Wins/Losses</b></TableCell>\r\n            <TableCell><b>Average Points Per Game</b></TableCell>\r\n            <TableCell><b>Streak</b></TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n            { (teams.length > 0) ? teams.map((team, index) => {\r\n                return (\r\n            <TableRow key={index} onClick={handleClick.bind(this)} id={team.Key} hover={true} >\r\n              <TableCell component=\"th\" scope=\"row\" style={{textAlign:'center'}}>\r\n                    <img src={allTeams.find(data => data.TeamID == team.TeamID).WikipediaLogoUrl} width=\"70px\" height=\"70px\"/>                \r\n              </TableCell>\r\n              <TableCell>\r\n                <h3>{team.City + \" \" + team.Name }</h3>\r\n                {team.Conference}<br/>\r\n                <small>{team.Division}</small>\r\n              </TableCell>\r\n              <TableCell>\r\n                {team.Wins + \" - \" + team.Losses}\r\n              </TableCell>\r\n              <TableCell>\r\n                {((team.PointsPerGameFor + team.PointsPerGameAgainst) / 2).toFixed(2)}\r\n              </TableCell>\r\n              <TableCell>\r\n                {team.StreakDescription}\r\n              </TableCell>\r\n            </TableRow>\r\n                )\r\n            }) : \r\n            <TableRow>\r\n                <TableCell colSpan=\"3\">Loading...</TableCell>\r\n            </TableRow>\r\n            }\r\n        </TableBody>\r\n      </Table>\r\n    </Paper>\r\n    )\r\n};\r\nexport default Teams;","import React from 'react';\nimport NavBar from './components/Navbar';\nimport TeamData from './components/TeamData';\nimport RosterData from './components/RosterData';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\n\n\n\n\nfunction App() {\n  \n  return (\n    <div>\n      <NavBar/>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <TeamData></TeamData>\n          </Route>\n          <Route path=\"/:team\">\n            <RosterData />\n          </Route>\n        </Switch>\n        </Router>      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport TeamData from './components/TeamData';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}